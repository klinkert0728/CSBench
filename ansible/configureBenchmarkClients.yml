---
    - name: Initial config
      hosts: "writing_clients, reading_clients, reading_clients_aus"
      remote_user: benchUser
      become: yes
      tasks:
        - name: update
          command: sudo apt -y update

        - name: install git
          command: sudo apt install git -y
        
        - name: install curl
          command: sudo apt install curl -y

        - name: clone repo
          shell: git clone https://github.com/klinkert0728/CSBench.git
    
    - name: Install reading client dependencies
      hosts: "reading_clients, reading_clients_aus"
      remote_user: benchUser
      become: yes
      tasks:
        - name: Install depenencies for docker
          apt:
            name: ["ca-certificates", "curl", "gnupg", "software-properties-common", "apt-transport-https"]
            state: present

        - name: install pip
          command: sudo apt install python3-pip -y
        
        - name: Download docker key
          shell: curl -fsSL  https://download.docker.com/linux/debian/gpg | apt-key add -
        
        - name: Docker repo
          apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/debian buster stable"
        
        - name: Install docker
          apt:
            name: ["docker-ce", "docker-ce-cli", "containerd.io", "docker-compose-plugin"]
            state: present

        - name: install requests requests
          command: python3 -m pip install requests

        - name: pip install Docker
          command: pip install docker

        - name: Start docker
          service:
            name: docker
            state: started
            enabled: yes
        
    - name: Start EU reading client docker
      hosts: reading_clients
      remote_user: benchUser
      become: yes
      vars:
        current_instances: {}
      tasks:
        - name: Get EU reading client target
          set_fact:
            current_instances: "{{ current_instances | combine({ item.key: item.value} ) }}"

          when: item.key is match("replica*")
          with_items: "{{ hostvars[groups.reading_clients[0]] | dict2items }}"

        - name: check ips
          ansible.builtin.debug:
            msg: "{{ current_instances }}"
        
        - name: build image
          shell: cd CSBench/readingClient && docker build -t reading-client-eu .

        - name: Start docker targeting each replica
          shell: cd CSBench/readingClient && docker run -d --name "{{ item.key }}"-"{{ item.value }}" reading-client-eu "{{ item.value }}" "secondary"
          
          loop: "{{ current_instances | dict2items }} "

        - name: Start reading primary
          ansible.builtin.shell: cd CSBench/readingClient && docker run -d --name primary_copy reading-client-eu "{{  hostvars[groups.writing_clients[0]].primary_copy }}" "primary"
          // TEST starting reading client for the primary

    - name: Start AUS reading client docker
      hosts: reading_clients_aus
      remote_user: benchUser
      become: yes
      vars:
        current_instances: {}
      tasks:
        - name: Get AUS reading client target
          set_fact:
            current_instances: "{{ current_instances | combine({ item.key: item.value} ) }}"

          when: item.key is match("replica*")
          with_items: "{{ hostvars[groups.reading_clients_aus[0]] | dict2items }}"

        - name: check ips
          ansible.builtin.debug:
            msg: "{{ current_instances }}"

        - name: build image
          shell: cd CSBench/readingClient && docker build -t reading-client-aus .

        - name: Start docker targeting each replica
          shell: cd CSBench/readingClient && docker run -d --name "{{ item.key }}"-"{{ item.value }}" reading-client-aus "{{ item.value }}" "secondary"
          
          loop: "{{ current_instances | dict2items }} "

    - name: Configure Writing client
      hosts: "writing_clients"
      remote_user: benchUser
      become: yes
      tasks:
        - name: download node
          shell: curl -sL https://deb.nodesource.com/setup_14.x | bash

        - name: install node
          command: sudo apt install nodejs -y

        - name: install dependencies
          shell: cd ./CSBench/writingClient && npm install && npm install pm2 -g

        - name: Check primary url
          ansible.builtin.debug:
            msg: "{{  hostvars[groups.writing_clients[0]].primary_copy }}"
        
        - name: Start first writing client to primary
          ansible.builtin.shell: cd ./CSBench/writingClient && pm2 start -f app.js -- "{{  hostvars[groups.writing_clients[0]].primary_copy }}"
          loop:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7